
ServoPWM_Atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000708  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		DDRB = 0xFF;
  80:	dd 24       	eor	r13, r13
  82:	da 94       	dec	r13
		TCCR1A = (1<<COM1A1) |	(1<<COM1B1) | (1<<WGM11) | (1<<WGM10);
  84:	00 e8       	ldi	r16, 0x80	; 128
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	0f 2e       	mov	r0, r31
  8a:	f3 ea       	ldi	r31, 0xA3	; 163
  8c:	ef 2e       	mov	r14, r31
  8e:	f0 2d       	mov	r31, r0
		TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM13) | (1<<WGM12);
  90:	c1 e8       	ldi	r28, 0x81	; 129
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	0f 2e       	mov	r0, r31
  96:	fd e1       	ldi	r31, 0x1D	; 29
  98:	ff 2e       	mov	r15, r31
  9a:	f0 2d       	mov	r31, r0
		OCR1A = 311;
  9c:	0f 2e       	mov	r0, r31
  9e:	f8 e8       	ldi	r31, 0x88	; 136
  a0:	af 2e       	mov	r10, r31
  a2:	b1 2c       	mov	r11, r1
  a4:	f0 2d       	mov	r31, r0
  a6:	67 e3       	ldi	r22, 0x37	; 55
  a8:	71 e0       	ldi	r23, 0x01	; 1
		OCR1B = 10;
  aa:	ea e8       	ldi	r30, 0x8A	; 138
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	4a e0       	ldi	r20, 0x0A	; 10
  b0:	50 e0       	ldi	r21, 0x00	; 0
		sei();
		
		for (OCR1B = 7 ; OCR1B<=40 ; OCR1B++)
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	30 e0       	ldi	r19, 0x00	; 0
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		DDRB = 0xFF;
  b6:	d4 b8       	out	0x04, r13	; 4
		TCCR1A = (1<<COM1A1) |	(1<<COM1B1) | (1<<WGM11) | (1<<WGM10);
  b8:	d8 01       	movw	r26, r16
  ba:	ec 92       	st	X, r14
		TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM13) | (1<<WGM12);
  bc:	f8 82       	st	Y, r15
		OCR1A = 311;
  be:	d5 01       	movw	r26, r10
  c0:	11 96       	adiw	r26, 0x01	; 1
  c2:	7c 93       	st	X, r23
  c4:	6e 93       	st	-X, r22
		OCR1B = 10;
  c6:	51 83       	std	Z+1, r21	; 0x01
  c8:	40 83       	st	Z, r20
		sei();
  ca:	78 94       	sei
		
		for (OCR1B = 7 ; OCR1B<=40 ; OCR1B++)
  cc:	31 83       	std	Z+1, r19	; 0x01
  ce:	20 83       	st	Z, r18
  d0:	80 81       	ld	r24, Z
  d2:	91 81       	ldd	r25, Z+1	; 0x01
  d4:	89 97       	sbiw	r24, 0x29	; 41
  d6:	78 f7       	brcc	.-34     	; 0xb6 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	bf ef       	ldi	r27, 0xFF	; 255
  da:	86 e7       	ldi	r24, 0x76	; 118
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	b1 50       	subi	r27, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x5e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x68>
  e8:	00 00       	nop
  ea:	80 81       	ld	r24, Z
  ec:	91 81       	ldd	r25, Z+1	; 0x01
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24
  f4:	80 81       	ld	r24, Z
  f6:	91 81       	ldd	r25, Z+1	; 0x01
  f8:	89 97       	sbiw	r24, 0x29	; 41
  fa:	70 f3       	brcs	.-36     	; 0xd8 <main+0x58>
  fc:	dc cf       	rjmp	.-72     	; 0xb6 <main+0x36>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
